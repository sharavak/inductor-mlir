module {
  func.func @test_sequential_ops(%arg0: tensor<3x3xf32>, %arg1: tensor<1xf32>, %arg2: tensor<1x3xf32>, %arg3: tensor<3x1xf32>, %arg4: tensor<3xf32>, %arg5: tensor<1x5x2xf32>, %arg6: tensor<4x5x1xf32>, %arg7: tensor<4x1x3xf32>) -> tensor<4x5x3xf32> {
    %0 = tosa.const_shape  {value = dense<1> : tensor<2xindex>} : () -> !tosa.shape<2>
    %1 = tosa.reshape %arg1, %0 : (tensor<1xf32>, !tosa.shape<2>) -> tensor<1x1xf32>
    %2 = tosa.const_shape  {value = dense<3> : tensor<2xindex>} : () -> !tosa.shape<2>
    %3 = tosa.tile %1, %2 : (tensor<1x1xf32>, !tosa.shape<2>) -> tensor<3x3xf32>
    %4 = tosa.add %arg0, %3 : (tensor<3x3xf32>, tensor<3x3xf32>) -> tensor<3x3xf32>
    %5 = tosa.const_shape  {value = dense<[3, 1]> : tensor<2xindex>} : () -> !tosa.shape<2>
    %6 = tosa.tile %arg2, %5 : (tensor<1x3xf32>, !tosa.shape<2>) -> tensor<3x3xf32>
    %7 = tosa.const_shape  {value = dense<[1, 3]> : tensor<2xindex>} : () -> !tosa.shape<2>
    %8 = tosa.tile %arg3, %7 : (tensor<3x1xf32>, !tosa.shape<2>) -> tensor<3x3xf32>
    %9 = tosa.add %6, %8 : (tensor<3x3xf32>, tensor<3x3xf32>) -> tensor<3x3xf32>
    %10 = tosa.const_shape  {value = dense<[1, 3]> : tensor<2xindex>} : () -> !tosa.shape<2>
    %11 = tosa.reshape %arg4, %10 : (tensor<3xf32>, !tosa.shape<2>) -> tensor<1x3xf32>
    %12 = tosa.const_shape  {value = dense<[3, 1]> : tensor<2xindex>} : () -> !tosa.shape<2>
    %13 = tosa.tile %11, %12 : (tensor<1x3xf32>, !tosa.shape<2>) -> tensor<3x3xf32>
    %14 = tosa.add %9, %13 : (tensor<3x3xf32>, tensor<3x3xf32>) -> tensor<3x3xf32>
    %15 = tosa.const_shape  {value = dense<[4, 1, 1]> : tensor<3xindex>} : () -> !tosa.shape<3>
    %16 = tosa.tile %arg5, %15 : (tensor<1x5x2xf32>, !tosa.shape<3>) -> tensor<4x5x2xf32>
    %17 = tosa.const_shape  {value = dense<[1, 1, 2]> : tensor<3xindex>} : () -> !tosa.shape<3>
    %18 = tosa.tile %arg6, %17 : (tensor<4x5x1xf32>, !tosa.shape<3>) -> tensor<4x5x2xf32>
    %19 = tosa.add %16, %18 : (tensor<4x5x2xf32>, tensor<4x5x2xf32>) -> tensor<4x5x2xf32>
    %20 = tosa.const_shape  {value = dense<[1, 1, 3]> : tensor<3xindex>} : () -> !tosa.shape<3>
    %21 = tosa.tile %arg6, %20 : (tensor<4x5x1xf32>, !tosa.shape<3>) -> tensor<4x5x3xf32>
    %22 = tosa.const_shape  {value = dense<[1, 5, 1]> : tensor<3xindex>} : () -> !tosa.shape<3>
    %23 = tosa.tile %arg7, %22 : (tensor<4x1x3xf32>, !tosa.shape<3>) -> tensor<4x5x3xf32>
    %24 = tosa.add %21, %23 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %25 = "tosa.const"() <{value = dense<1> : tensor<1xi8>}> : () -> tensor<1xi8>
    %26 = "tosa.const"() <{value = dense<-1.000000e+00> : tensor<4x5x3xf32>}> : () -> tensor<4x5x3xf32>
    %27 = "tosa.const"() <{value = dense<0.000000e+00> : tensor<4x5x3xf32>}> : () -> tensor<4x5x3xf32>
    %28 = tosa.greater %24, %27 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xi1>
    %29 = tosa.equal %24, %27 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xi1>
    %30 = tosa.greater %27, %24 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xi1>
    %31 = tosa.select %28, %24, %27 : (tensor<4x5x3xi1>, tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %32 = tosa.mul %31, %26, %25 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>, tensor<1xi8>) -> tensor<4x5x3xf32>
    %33 = tosa.log %31 : (tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %34 = tosa.mul %32, %33, %25 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>, tensor<1xi8>) -> tensor<4x5x3xf32>
    %35 = tosa.select %29, %31, %27 : (tensor<4x5x3xi1>, tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %36 = tosa.select %30, %31, %27 : (tensor<4x5x3xi1>, tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %37 = tosa.add %34, %35 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %38 = tosa.add %37, %36 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %39 = tosa.const_shape  {value = dense<[1, 5, 1]> : tensor<3xindex>} : () -> !tosa.shape<3>
    %40 = tosa.tile %arg7, %39 : (tensor<4x1x3xf32>, !tosa.shape<3>) -> tensor<4x5x3xf32>
    %41 = tosa.add %38, %40 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    %42 = tosa.add %41, %41 : (tensor<4x5x3xf32>, tensor<4x5x3xf32>) -> tensor<4x5x3xf32>
    return %42 : tensor<4x5x3xf32>
  }
}

